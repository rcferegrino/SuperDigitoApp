@page "/"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using SuperDigitoApp.Data
@rendermode InteractiveServer
@attribute [Authorize(Policy = "AuthorizedUsersOnly")]
@inject Services.Interfaces.ISuperDigitCalculator SuperDigitCalculator
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
<PageTitle>Super Digito</PageTitle>
<h3>Calulacora de Super Digito</h3>

<PageTitle>Super Digito</PageTitle>
<h3 class="text-center my-4">Calulacora de Super Digito</h3>

<div class="container">
    <div class="row mb-3">
        <div class="col-md-6">
            <label for="numberInput" class="form-label">Número:</label>
            <input type="number" id="numberInput" class="form-control" @bind="_inputNumber" />
        </div>
        <div class="col-md-6">
            <label for="resultOutput" class="form-label">Resultado:</label>
            <input type="text" id="resultOutput" class="form-control" @bind="Result" readonly />
        </div>
    </div>
    <div class="row">
        <div class="col text-center">
            <button class="btn btn-primary me-2" @onclick="CalculateSuperDigit">Calcular</button>
            <button class="btn btn-danger" @onclick="ClearHistory">Borrar Historial</button>
        </div>
    </div>
</div>

<h4 style="margin-top: 20px;">Historial de Cálculos</h4>
@if (_calculationHistory.Count > 0)
{
    <table class="table table-bordered table-striped">
        <thead class="table-light">
        <tr>
            <th scope="col">Número</th>
            <th scope="col">Resultado</th>
            <th scope="col">FechaHora</th>
            <th scope="col">Acciones</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var entry in _calculationHistory)
        {
            <tr>
                <td>@entry.Number</td>
                <td>@entry.Result</td>
                <td>@entry.DateTime</td>
                <td>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteEntry(entry)">Borrar</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>No hay cálculos en el historial.</p>
}

@code {
    private int _inputNumber; // Stores the user input
    private string? Result { get; set; } = string.Empty; // The calculated result as a bound property
    private readonly List<CalculationEntry> _calculationHistory = []; // Holds the history entries
    private string? LoggedInUserId { get; set; } // To store the user's Id

    private async Task CalculateSuperDigit()
    {
        // Check if the requested number exists in the history
        var existingEntry = _calculationHistory.FirstOrDefault(entry => entry.Number == _inputNumber);

        if (existingEntry != null)
        {
            // Use the existing entry and update the DateTime
            Result = existingEntry.Result;
            existingEntry.DateTime = DateTime.Now.ToString("g"); // Update to the current time
        }
        else
        {
            // Perform the calculation because it's not in the history
            Result = SuperDigitCalculator.Calculate(_inputNumber).ToString();

            // Add the new calculation to the HISTORY
            var newEntry = new CalculationEntry
            {
                Number = _inputNumber,
                Result = Result,
                DateTime = DateTime.Now.ToString("g") // General Date-Time format
            };
            _calculationHistory.Add(newEntry);

            // Add the new calculation to the DATABASE
            var dbEntry = new CalculationHistory
            {
                Number = _inputNumber,
                Result = Result,
                DateTime = DateTime.Now, // Use DateTime directly for EF
                UserId = LoggedInUserId
            };

            DbContext.CalculationHistories.Add(dbEntry);
            await DbContext.SaveChangesAsync(); // Save changes asynchronously
        }
    }

    private async Task ClearHistory()
    {
        if (!string.IsNullOrEmpty(LoggedInUserId))
        {
            // Fetch all calculation histories for the logged-in user
            var userHistory = DbContext.CalculationHistories
                .Where(entry => entry.UserId == LoggedInUserId);

            // Remove the entries from the database
            DbContext.CalculationHistories.RemoveRange(userHistory);

            // Persist the changes
            await DbContext.SaveChangesAsync();
        }
        _calculationHistory.Clear(); // Clear the history
    }

    // Model for history entries
    private class CalculationEntry
    {
        public int Id { get; init; }
        public int Number { get; init; }
        public string? Result { get; init; }
        public string? DateTime { get; set; }
    }
    
    private async Task DeleteEntry(CalculationEntry entry)
    {
        // Remove from memory
        _calculationHistory.Remove(entry);

        if (!string.IsNullOrEmpty(LoggedInUserId))
        {
            // Identify the row in the database by Id
            var dbEntry = await DbContext.CalculationHistories
                .FirstOrDefaultAsync(e => e.Id == entry.Id && e.UserId == LoggedInUserId);

            if (dbEntry != null)
            {
                // Remove the entry from the database
                DbContext.CalculationHistories.Remove(dbEntry);

                // Commit the change to the database
                await DbContext.SaveChangesAsync();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Fetch the current authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true) // Only if the user is authenticated
        {
            var applicationUser = await UserManager.GetUserAsync(user); // Fetch user from UserManager
            LoggedInUserId = applicationUser?.Id; // Store the User ID (or other needed details)

            if (!string.IsNullOrEmpty(LoggedInUserId))
            {
                // Load the calculation history from the database
                var historyFromDb = await DbContext.CalculationHistories
                    .Where(entry => entry.UserId == LoggedInUserId) // Filter by user ID
                    .OrderByDescending(entry => entry.DateTime) // Optional: order by date
                    .ToListAsync();

                // Map the database entries to CalculationEntry objects
                _calculationHistory.AddRange(historyFromDb.Select(entry => new CalculationEntry
                {
                    Id = entry.Id,
                    Number = entry.Number,
                    Result = entry.Result,
                    DateTime = entry.DateTime.ToString("g") // Format DateTime for display
                }));
            }
        }
    }
}